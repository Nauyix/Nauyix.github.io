[{"title":"maven笔记","date":"2023-02-21T06:45:25.000Z","url":"/2023/02/21/maven%E7%AC%94%E8%AE%B0/","categories":[[" ",""]],"content":"喔，填坑呢在这 组成 坐标 groupId 隶属组织名称 artifactId 当前项目名称 version 当前版本号 packaging 打包方式（默认为jar） 作用：唯一定位该资源，查找、下载并使用资源 配置 环境变量MAVEN_HOME 可以配置settings.xml（全局生效），也可以配置pom.xml（对当前项目生效） 本地仓库配置… 配置镜像仓库（加速下载，常用阿里云仓库）… 依赖 项目可以依赖项目 项目可以依赖现成的包 依赖中存在的问题： 路径优先:当依赖中出现相同的资源时，层级越深，优先级越低，层级越浅，优先级越高 声明优先:当资源在相同层级被依赖时，配置顺序靠前的覆盖配置顺序靠后的 特殊优先:当同级配置了相同资源的不同版本，后配置的覆盖先配置的 可选依赖 场景：不希望别人知道我用过这个依赖 true 效果：当前项目使用该依赖，但依赖该项目的项目不自动引用该依赖 排除依赖 场景：不希望使用某依赖 在一个dependency里写： 效果：若当前项目排除了依赖项目的A依赖，则该A依赖不会被当前应用所依赖 依赖范围：注意：依赖范围具有传递性 scope 主代码 测试代码 打包 compile(默认) 1 1 1 test 0 1 0 provided 1 1 0 runtime 0 0 1 生命周期与插件clean 清理 pre-clean clean post-cleandefault 核心工作（编译、测试、打包、部署） site 产生报告 pre- site post-site site-deploy 插件：与生命周期相绑定或者可以说maven的每一个生命周期都是利用插件来实现的 引入引入方式同依赖，只不过把dependency改成plubins&#x2F;plugin&lt;groupId&gt;…&lt;&#x2F;groupId&gt;&lt;artifactId&gt;….&lt;&#x2F;artifactId&gt;&lt;version&gt;…&lt;&#x2F;version&gt; 目标设置&lt;executions&gt;…&lt;&#x2F;executions&gt;下层：指令&lt;&#x2F;goal&gt;运行阶段&lt;&#x2F;phase&gt;即为在哪个生命周期中执行该插件 分模块开发与设计总目标：将程序拆装成不同模块，利用接口通信 （不是java的接口）controller 控制层service 业务层dao 持久层pojo 展示层 聚合依赖用一个模块来管理其他模块 设置聚合模块打包方式为pom &lt;modules&gt;被聚合的工程列表&lt;&#x2F;modules&gt; 继承 模块依赖关系维护 子模块可以声明需要依赖，但是不限定版本，若出现版本冲突则会难以解决 解决方案： 在聚合模块中声明所有的依赖 在子模块中声明&lt;parent&gt;工件ID&#x2F;版本&#x2F;GroupId….&lt;&#x2F;parent&gt; 子工程在设计dependency时不需要写version继承的作用：子工程中沿用父工程的依赖配置 属性定义自定义属性 版本管理 关于版本号命名的小常识 snapshot 开发过程中，为方便合作或解决依赖等，输出的临时性版本，会随着开发的进展不断更新，更新周期较短 release 经过测试后，团队对外发布的，运行较为稳定的版本，更新周期较长 关于版本号的一些约定：&lt;主版本&gt;&lt;次版本&gt;&lt;增量版本&gt;&lt;里程碑版本&gt; 如：5.1.13-Release 多环境开发配置-不需逐个更改文件即可兼容（生产环境&#x2F;开发环境&#x2F;测试环境……） 执行特定环境方法：mvn -P [环境名称] 跳过测试 常用场景： 模块功能未开发（完毕） 单个功能更新导致其他功能失效 快速打包 方式 在maven配置窗口跳过 mvn -D skipTests 在pom中配置测试插件(maven-surefire-plugin)，设置&lt;skipTests&gt;true&lt;&#x2F;skipTests&gt;(不建议使用) 只使用部分用例测试 在测试插件(maven-surefire-plugin)的configuration中，设置include-对应的测试用例(.java) 私服暂时没学嗷"},{"title":"thread","date":"2023-02-13T00:31:40.000Z","url":"/2023/02/13/thread/","categories":[[" ",""]]},{"title":"Intern Summary","date":"2023-02-13T00:26:48.000Z","url":"/2023/02/13/Intern/","categories":[[" ",""]],"content":"祝有情人终成兄妹 2月13日8:27 过来刷了脸？然后等安排QAQ9:23 知道开发环境地址和wiki地址了，也可以上网了，正在学习中13:30 午休结束 还是不知道该干啥，刷刷力扣吧16:09 里程碑式的时刻，有git帐号了！16:43 折腾了半天，ssh还是不好用，算了，先用低版本maven和http拉代码吧，之后再查 今天上午把畅游wiki里的项目文档，对于项目大体内容有了一些浅显的了解，但是下午拿到git帐号之后由于各种奇怪的原因一直没有跑起来回家之后又莫名其妙能运行了？新目标：以最快的速度过一遍maven和springboot和mybatis的基础知识，然后开始生啃代码 2月14日今天是情人节诶，但是都快下班了惊觉今天还没有写任何日常昨晚突击了一下maven，今天晚上该突击mybatis了吧 ~~ 提前预习下学期要学的知识 ~~ 说起来第一次用PostgreSQL，关于复杂一点的sql知识也稍微有点忘记了总之还是慢慢学吧"},{"title":"Spring笔记","date":"2023-02-05T13:46:09.000Z","url":"/2023/02/05/Spring%E7%AC%94%E8%AE%B0/","categories":[[" ",""]],"content":"Spring框架笔记（参考动力节点Spring框架教程制作，逐步完善中） 开闭原则（Open Cloce Protocal, OCP）：软件应对扩展开放，对修改关闭 依赖倒转原则（Dependency Inversion Principle, DIP）： 高层模块不应该依赖低层模块，二者都应该依赖其抽象 中心思想：面向接口编程，面向抽象编程 目的：降低程序耦合，提高扩展性能 控制反转 编程思想（Inversion of Control, IoC） 不在程序中采用硬编码的方式来新建对象 不在程序中采取硬编码的方式来维护对象关系 由于出现较晚，没有被纳入GoF23种设计模式范围内 实现方式较多，其中比较重要的有：依赖注入（Dependency Injection, DI） IoC是思想，DI是实现 注入方法：Set方法注入&#x2F;构造方法注入 set注入 构造方法注入 Spring框架 实现控制反转IoC，协助新建对象&#x2F;维护对象关系 实现IoC思想的容器 八大模块： Core: 基于IoC的核心，实现对Bean的管理，主要组件是BeanFactorty AOP: 次核心，面向切面编程 Web MVC: Spring自己提供的一套MVC框架（暨SpringMVC） WebFlux: 响应式Web框架 Web: 支持集成常见的Web框架（如struts，webwork） DAO: 提供了单独的支持JDBC操作的API ORM: 支持集成常见的ORM框架（如MyBatis,Hibernate） Context: 提供扩展服务 特点 轻量 非侵入式：Spring应用中对象不依赖Spring的特定类 轻量：体积小 控制反转：底层使用工厂模式（XML解析+工厂模式+反射机制） 面向切面 容器 框架 pom.xml 指定打包方式 repositories 仓库地址 dependencies 依赖 Spring的配置文件 放在resources目录下的xml文件 配置标签，让spring创造对象 bean的两个重要属性： id bean的唯一标识符 类的全限定类名（带包名） Spring容器的使用 获取Spring容器对象：ApplicationContext ac&#x3D;new ClassPathXmlApplicationContext(“配置文件路径”) 注意：运行上一行局内代码即视为启动Spring容器，解析xml文件，并实例化其所有的Bean对象 根据BeanID获取对象：ac.getBean(“Bean的ID”,bean类型.class); 参数2若留空，返回类型默认为Object spring框架通过反射机制来创建对象→一定要保证无参构造方法存在 Class cz&#x3D;Class.forName(“完整类名”) Object obj&#x3D;cz.newInstance() 底层使用Map&lt;String,Object存储&gt; 同一个xml文件内不可以有同id的bean，若同时加载多个xml后，存在同id的bean，后加载的bean的会覆盖先加载的bean，被覆盖的bean不会被实例化（猜测：也许是先加载完所有的bean然后再统一实例化？） getBean的时候不可以虚空索敌，会报错 启动Log4j2日志框架 引入依赖 创建xml配置文件 在项目内记录日志信息 创建日志记录器对象 根据不同级别输出日志 "},{"title":"About-2023","date":"2023-02-01T14:18:58.000Z","url":"/2023/02/01/About-2023/","categories":[[" ",""]],"content":"在这个世界，有一点希望 有一点失望，我时常这么想 这个世界-孙燕姿2023才刚刚开始，歌曲可能会随每月心情而更改哦;-) 今年更是全新开坑的一年！我决定年初就开始写总结！ 一月份 双板滑雪入门之在中级道被鱼类创飞！ 从0开始的网络编程 从0开始的python生活 二月份 为什么小0（@Yongtai）这么卷啊 Spring！ 从0开始的实习生活 得到又失去，相遇却别离，或许重逢，或许再而不见 "},{"title":"About 2022","date":"2022-11-27T13:54:30.000Z","url":"/2022/11/27/About-2022/","categories":[[" ",""]],"content":"永恒是颗虚伪的糖，任回忆终堆积成墙。 是谁说了谎，还要一直伪装 Hello-龚言脩也是上文中歌词的出处 好像上一秒还在2021跨年夜，转瞬间2022都快结束了今天是11月27日，济南站结束，大学的ICPC奋斗史也划上了一个句号，思绪万千，但不知道该从哪里写起，索性就提前把坑开好，之后慢慢找补吧 一月份 去上海玩了一圈，这是人生第一次自己去想去的地方旅游，和两个🐖一起 多校，一周四场，补题补得像是人间炼狱 二月份-五月份 赶着开学前把阑尾切掉了，本来想借着手术得由头晚几天返校，谁知道一晚就是三个月，五月初才返校 好像这几个月除了csgo技术见涨以外没有什么收获 四级裸考一次过(知道自己很弱，大佬们求轻喷):( 六月份 工程训练好像挺有意思的 从零开始的期末考试 系统分析与设计、计算机网络、操作系统 在家做的课设，还有答辩，录屏是真的无聊哇 七月份-八月份 和小0（@Yongtai）一起鬼混了两个月 九月份-十月份 转眼大三了，普通的上课生活 十一月 ICPC济南站铁牌，做了五道题，过了两道题，哎 TAT 新生赛顺利举办，撒花，协会纳新完成，协会的事情以后就交给大二同学们管了 期末还是一如既往的早呀，十一月十几号就把项目管理和软件测试考完了 我是不可能挂科的！ 十一月打完了九月开始的5E定级 2100!水平还在! 十二月 502被收了，完结撒花，协会解散吧，都别活 课设，是在做课设吗？是在渡劫 得新冠啦，虽然没发烧，但是身上没劲，头疼流鼻涕，呜呜呜 见证历史，但买不到抗原 想给小李邦邦两拳 "},{"title":"Hello","date":"2022-11-26T08:20:22.000Z","url":"/2022/11/26/Hello/","categories":[[" ",""]],"content":"这个网站是怎么来的呢? 这个域名(lxy12138.com)是在2014年被第一次注册的。在一开始的三年，站点部署在47姐姐的私人服务器上（感谢47姐姐的慷概解囊）大概从2018年开始，由于各种原因，站点不再更新，也一度陷入停站状态，仅保留了域名邮箱的使用:-( (高中真的又忙又穷谁有时间天天管一个网站嘤嘤嘤)在2022年末，由于懒狗赵石突然决定做些什么事情，于是，他重建了这个网站也就是现在你看到的，赵石的小窝 V2.0 嗨，别来无恙啊;-) Contact me at: &#x73;&#116;&#x7a;&#x32;&#x30;&#49;&#53;&#64;&#111;&#117;&#x74;&#108;&#111;&#x6f;&#107;&#x2e;&#x63;&#x6f;&#x6d;"},{"title":"Temporarily Void","date":"2022-11-25T14:43:21.270Z","url":"/2022/11/25/hello-world/","categories":[[" ",""]],"content":"New pages and articles are still on the way But Don’t worry:)It wont be too long"}]